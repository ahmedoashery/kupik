// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @db.Text @map("session_token")
  userId       String   @map("user_id")
  startedAt    DateTime @map("started_at")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  firstname     String?
  lastname      String?
  contact       String?
  phone         String?   @unique
  company       String?
  address       String?
  city          String?
  zipcode       String?
  name          String?    @unique
  email         String?   @unique
  password      String?   @db.Text
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  invoices      Invoice[]
  bills         Bill[]

  @@unique(fields: [firstname, lastname], name:"fullname")
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  parentId  Int?      @map("parent_id")
  parent    Group?    @relation("groupToGroup", fields: [parentId], references: [id], onDelete: NoAction)
  subGroups Group[]   @relation("groupToGroup")
  entities  Entity[]
  shippers  Shipper[]

  @@index([parentId])
  @@map("groups")
}

model Entity {
  id            Int       @id @default(autoincrement())
  groupId       Int?      @map("group_id")
  code          String?   @unique
  accountNumber String?   @unique @map("accountnumber")
  firstname     String
  lastname      String?
  avatar        String?
  contact       String?
  phone         String?   @unique
  company       String?
  address       String?
  city          String?
  zipcode       String?
  startedAt     DateTime? @default(now()) @map("started_at")
  isActive      Boolean?  @default(true) @db.TinyInt()
  group         Group?    @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  invoices      Invoice[]
  bills         Bill[]
  orders        Order[]

  @@unique(fields: [firstname, lastname], name: "fullname")
  @@index([groupId])
  @@map("names")
}

model ChartOfAccount {
  id              Int              @id @default(autoincrement())
  number          Int?             @unique
  name            String           @unique
  parentId        Int?             @map("parent_id")
  openBalance     Decimal?         @map("open_balance")
  balance         Decimal?
  type            String?
  description     String?
  parent          ChartOfAccount?  @relation("accountsToaccounts", fields: [parentId], references: [id], onDelete: NoAction)
  subAccounts     ChartOfAccount[] @relation("accountsToaccounts")
  bills           Bill[]
  billLines       BillLine[]
  billPayments    BillPayment[]
  invoices        Invoice[]
  invoiceLines    InvoiceLine[]
  invoicePayments InvoicePayment[]

  @@index([parentId])
  @@map("chart_accounts")
}

model Bill {
  id        Int             @id @default(autoincrement())
  type      String?
  entityId  Int?            @map("entity_id")
  userId    String?         @map("user_id")
  accountId Int?            @map("account_id")
  date      DateTime?       @default(now())
  billLines BillLine[]
  payments  BillPayment[]
  entity    Entity?         @relation(fields: [entityId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  user      User?           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  account   ChartOfAccount? @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@index([entityId])
  @@index([accountId])
  @@map("bills")
}

model BillLine {
  id        Int             @id @default(autoincrement())
  billId    Int?            @map("bill_id")
  accountId Int?            @map("account_id")
  itemId    Int?            @map("item_id")
  quantity  Decimal?        @db.Decimal(10, 0)
  price     Decimal?        @db.Decimal(10, 0)
  amount    Decimal?        @db.Decimal(10, 0)
  item      Item?           @relation(fields: [itemId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  bill      Bill?           @relation(fields: [billId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  account   ChartOfAccount? @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@index([itemId])
  @@index([billId])
  @@index([accountId])
  @@map("bill_lines")
}

model BillPayment {
  id        Int             @id @default(autoincrement())
  billId    Int?            @map("bill_id")
  accountId Int?            @map("account_id")
  date      DateTime?       @default(now())
  memo      String?
  amount    Decimal?        @db.Decimal(10, 0)
  bill      Bill?           @relation(fields: [billId], references: [id], onDelete: NoAction)
  account   ChartOfAccount? @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@index([billId])
  @@index([accountId])
  @@map("bill_payments")
}

model Order {
  id        Int       @id @default(autoincrement())
  serialNo  Int?      @unique @map("serial_no")
  addedBy   Int?      @map("added_by")
  addedAt   DateTime? @default(now()) @map("added_at")
  updatedBy Int?      @map("updated_by")
  updatedAt DateTime? @default(now()) @map("updated_at")
  statusId  Int?      @map("status_id")
  statusAt  DateTime? @default(now()) @map("status_at")
  comments  String?
  notes     String?
  shipment  Shipment?
  status    Status?   @relation(fields: [statusId], references: [id])
  entity    Entity?   @relation(fields: [entityId], references: [id])
  entityId  Int?

  @@index([addedBy, updatedBy, statusId, entityId])
  @@map("orders")
}

model Status {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  orders Order[]

  @@map("statuses")
}

model City {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  shipments Shipment[]

  @@map("cities")
}

model Shipment {
  id        Int       @id @default(autoincrement())
  date      DateTime? @default(now())
  name      String?
  cityId    Int?      @map("city_id")
  address   String?
  shipperId Int?      @map("shipper_id")
  notes     String?
  city      City?     @relation(fields: [cityId], references: [id])
  shipper   Shipper?  @relation(fields: [shipperId], references: [id])
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   Int       @unique

  @@index([shipperId, cityId, orderId])
  @@map("shipments")
}

model Shipper {
  id        Int        @id @default(autoincrement())
  groupId   Int?       @map("group_id")
  code      String?    @unique
  firstname String
  lastname  String?
  contact   String?
  phone     String?    @unique
  company   String?
  address   String?
  city      String?
  zipcode   String?
  startedAt DateTime?  @default(now()) @map("started_at")
  group     Group?     @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  shipments Shipment[]

  @@index([groupId])
  @@map("shippers")
}

model Invoice {
  id           Int              @id @default(autoincrement())
  num          Int?             @unique
  type         String?
  entityId     Int?             @map("entity_id")
  accountId    Int?             @map("account_id")
  userId       String?          @map("user_id")
  date         DateTime?        @default(now())
  payments     InvoicePayment[]
  invoiceLines InvoiceLine[]
  entity       Entity?          @relation(fields: [entityId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  user         User?            @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  account      ChartOfAccount?  @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@index([entityId])
  @@index([accountId])
  @@map("invoices")
}

model InvoiceLine {
  id        Int             @id @default(autoincrement())
  invoiceId Int?            @map("invoice_id")
  accountId Int?            @map("account_id")
  itemId    Int?            @map("item_id")
  quantity  Decimal?        @db.Decimal(10, 0)
  price     Decimal?        @db.Decimal(10, 0)
  amount    Decimal?        @db.Decimal(10, 0)
  invoice   Invoice?        @relation(fields: [invoiceId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  item      Item?           @relation(fields: [itemId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  account   ChartOfAccount? @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@index([invoiceId])
  @@index([itemId])
  @@index([accountId])
  @@map("invoice_lines")
}

model InvoicePayment {
  id        Int             @id @default(autoincrement())
  invoiceId Int?            @map("invoice_id")
  accountId Int?            @map("account_id")
  date      DateTime?       @default(now())
  memo      String?
  amount    Decimal?        @db.Decimal(10, 0)
  invoice   Invoice?        @relation(fields: [invoiceId], references: [id], onDelete: NoAction)
  account   ChartOfAccount? @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@index([invoiceId])
  @@index([accountId])
  @@map("invoice_payments")
}

model Item {
  id          Int           @id @default(autoincrement())
  categoryId  Int?          @map("category_id")
  inventoryId Int?          @map("inventory_id")
  code        String?       @unique
  name        String?       @unique
  cost        Decimal?      @db.Decimal()
  price       Decimal?      @db.Decimal()
  image       String?
  startedAt   DateTime?     @default(now()) @map("started_at")
  isActive    Boolean?      @default(true) @db.TinyInt()
  category    Category?     @relation(fields: [categoryId], references: [id])
  inventory   Inventory?    @relation(fields: [inventoryId], references: [id])
  billLines   BillLine[]
  InvoiceLine InvoiceLine[]

  @@index([categoryId])
  @@index([inventoryId])
  @@map("items")
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  image         String?
  parentId      Int?       @map("parent_id")
  subCategory   Category?  @relation("categoryTocategory", fields: [parentId], references: [id], onDelete: NoAction)
  subCategories Category[] @relation("categoryTocategory")
  items         Item[]

  @@index([parentId])
  @@map("categories")
}

model Inventory {
  id    Int    @id @default(autoincrement())
  name  String @unique
  items Item[]

  @@map("inventories")
}
